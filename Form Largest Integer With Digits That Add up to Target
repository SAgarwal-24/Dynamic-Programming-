1449. Form Largest Integer With Digits That Add up to Target
My Submissions 
•	User Accepted:763
•	User Tried:1672
•	Total Accepted:840
•	Total Submissions:4108
•	Difficulty:Hard
Given an array of integers cost and an integer target. Return the maximum integer you can paint under the following rules:
•	The cost of painting a digit (i+1) is given by cost[i] (0 indexed).
•	The total cost used must be equal to target.
•	Integer does not have digits 0.
Since the answer may be too large, return it as string.
If there is no way to paint any integer given the condition, return "0".
 
Example 1:
Input: cost = [4,3,2,5,6,7,2,5,5], target = 9
Output: "7772"
Explanation:  The cost to paint the digit '7' is 2, and the digit '2' is 3. Then cost("7772") = 2*3+ 3*1 = 9. You could also paint "997", but "7772" is the largest number.
Digit    cost
  1  ->   4
  2  ->   3
  3  ->   2
  4  ->   5
  5  ->   6
  6  ->   7
  7  ->   2
  8  ->   5
  9  ->   5
Example 2:
Input: cost = [7,6,5,5,5,6,8,7,8], target = 12

Output: "85"
Explanation: The cost to paint the digit '8' is 7, and the digit '5' is 5. Then cost("85") = 7 + 5 = 12.
Example 3:
Input: cost = [2,4,6,2,4,6,4,4,4], target = 5
Output: "0"
Explanation: It's not possible to paint any integer with total cost equal to target.
Example 4:
Input: cost = [6,10,15,40,40,40,40,40,40], target = 47
Output: "32211"
 
Constraints:
•	cost.length == 9
•	1 <= cost[i] <= 5000
•	1 <= target <= 5000

Solution 1:
The first solution - top-down DP with memoisation - is the easiest to come up with, so I used it in the contest. After you figured it out, that solution can be converted to bottom-up tabulation.
The bottom-up solution is still O(n ^ 2), because we build n strings, and a string can be up to n characters.
So, for O(n) solution below, I used a vector that tracks the current character, and the size of the string. In the end, we can construct the final string by back-tracking.
Top-Down
string dp[5001] = {};
string largestNumber(vector<int>& cost, int t) {
    if (t <= 0)
        return t == 0 ? "" : "0";
    if (dp[t].empty()) {
        dp[t] = "0";
        for (int n = 1; n <= 9; ++n) {
            auto res = largestNumber(cost, t - cost[n - 1]);
            if (res != "0" && res.size() + 1 >= dp[t].size())
                dp[t] = to_string(n) + res;
        }
    }
    return dp[t];
}
Bottom-Up
string largestNumber(vector<int>& cost, int t) {
    vector<string> dp(t + 1, "0");
    dp[t] = "";
    for (int i = t - 1; i >= 0; --i) {
        for (int n = 1; n <= 9; ++n) {
            int val = i + cost[n - 1];
            if (val <= t && dp[val] != "0")
                if (dp[val].size() + 1 >= dp[i].size())
                    dp[i] = to_string(n) + dp[val];
        }
    }
    return dp[0];
}
O(n)
string largestNumber(vector<int>& cost, int t) {
    vector<pair<int, int>> dp(t + 1);
    dp[t].second = 1;
    for (int i = t - 1; i >= 0; --i)
        for (int n = 0; n <= 8; ++n) {
            int val = i + cost[n];
            if (val <= t && dp[val].second != 0)
                if (dp[val].second + 1 >= dp[i].second)
                    dp[i] = { n, dp[val].second + 1};
        }
    if (dp[0].second == 0)
        return "0";
    string res;
    for (auto i = 0; i < t; i += cost[dp[i].first])
        res.push_back(dp[i].first + '1');
    return res;
}


